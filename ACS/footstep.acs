// Footsteps V3
// ACS Source
#library "footstep"

// Includes
#include "zcommon.acs"
#include "includes.acs"

// Defines

// If you are adding a new texture to the list
// of textures that have custom sounds, add the texture's
// name to this list, as well as defining its sound
// in the LANGUAGE lump.

#define FLOOR_TEXTURES 148
str floorTexture[FLOOR_TEXTURES] =
{
	"FWATER1", "FWATER2", "FWATER3", "FWATER4",
	"FLOOR0_1", "FLOOR0_3", "FLOOR1_7", "FLOOR4_1",
	"FLOOR4_5", "FLOOR4_6", "TLITE6_1", "TLITE6_5",
	"CEIL3_1", "CEIL3_2", "CEIL4_2", "CEIL4_3",
	"CEIL5_1", "FLAT2", "FLAT5", "FLAT18",
	"FLOOR0_2", "FLOOR0_5", "FLOOR0_7", "FLAT5_3",
	"CRATOP1", "CRATOP2", "FLAT9", "FLAT17",
	"FLAT19", "COMP01", "GRNLITE1", "FLOOR1_1",
	"FLAT14", "FLAT5_5", "FLOOR1_6", "CEIL4_1",
	"GRASS1", "GRASS2", "RROCK16", "RROCK19",
	"FLOOR6_1", "FLOOR6_2", "FLAT10", "MFLR8_3",
	"MFLR8_4", "RROCK17", "RROCK18", "FLOOR0_6",
	"FLOOR4_8", "FLOOR5_1", "FLOOR5_2", "FLOOR5_3",
	"FLOOR5_4", "TLITE6_4", "TLITE6_6", "FLOOR7_1",
	"MFLR8_1", "CEIL3_5", "CEIL5_2", "CEIL3_6",
	"FLAT8", "SLIME13", "STEP1", "STEP2",
	"GATE1", "GATE2", "GATE3", "CEIL1_2",
	"CEIL1_3", "SLIME14", "SLIME15", "SLIME16",
	"FLAT22", "FLAT23", "CONS1_1", "CONS1_5",
	"CONS1_7", "GATE4", "FLAT4", "FLAT1",
	"FLAT5_4", "MFLR8_2", "FLAT1_1", "FLAT1_2",
	"FLAT1_3", "FLAT5_7", "FLAT5_8", "GRNROCK",
	"RROCK01", "RROCK02", "RROCK03", "RROCK04",
	"RROCK05", "RROCK06", "RROCK07", "RROCK08",
	"RROCK09", "RROCK10", "RROCK11", "RROCK12",
	"RROCK13", "RROCK14", "RROCK15", "RROCK20",
	"SLIME09", "SLIME10", "SLIME11", "SLIME12",
	"FLAT5_6", "FLOOR3_3", "FLAT20", "CEIL3_3",
	"CEIL3_4", "FLAT3", "FLOOR7_2", "DEM1_1",
	"DEM1_2", "DEM1_3", "DEM1_4", "DEM1_5",
	"DEM1_6", "CEIL1_1", "FLAT5_1", "FLAT5_2",
	"NUKAGE1", "NUKAGE2", "NUKAGE3", "BLOOD1",
	"BLOOD2", "BLOOD3", "SLIME01", "SLIME02",
	"SLIME03", "SLIME04", "SLIME05", "SLIME06",
	"SLIME07", "SLIME08", "SFLR6_1", "SFLR6_4",
	"SFLR7_1", "SFLR7_4", "LAVA1", "LAVA2",
	"LAVA3", "LAVA4", "F_SKY1"
};

// Scripts
Script "Footsteps" ENTER 
{
	str volumeMultiplierCVar = StrParam(l:"VOLUMEMULTIPLIER_CVAR");
	str delayMultiplierCVar = StrParam(l:"DELAYMULTIPLIER_CVAR");
	int volumeMultiplier, delayMultiplier, controlWithCVars;
	if (StrICmp("TRUE", StrParam(l:"CONTROLWITHCVARS")))
	{
		controlWithCVars = true;
		volumeMultiplier = GetCVar(volumeMultiplierCVar);
		delayMultiplier = GetCVar(delayMultiplierCVar);
	}
	else
	{
		volumeMultiplier = StrToFloat(StrParam(l:"VOLUMEMULTIPLIER"));
		delayMultiplier = StrToFloat(StrParam(l:"DELAYMULTIPLIER"));
	}
	int delayTime, stepVolume, i;
	int altStep = 0;
	int counter = 0;
	int falling = false;
	int lastZ = GetActorFloorZ(0);
	int rollDir = random(0,1);
	if (rollDir == 0) rollDir = -1;
	int rollDead = 0;
	int rollDest = 0;
	int roll = 0;
	int lastHP = GetActorProperty(0,APROP_Health);
	int wound, vel;
	str stepSound, langDef;
	str defStepSound = StrParam(l:"STEP_DEFAULT");
	while (true)
	{
		int hp = GetActorProperty(0,APROP_Health);
		int boost = CheckInventory("sprinting");
		if (boost == 0)
			boost = CheckInventory("R6_Stamina")*0.00029125 + 0.436875;
		else
			boost = CheckInventory("R6_Stamina")*0.0005 + 0.875;
		if (hp > 100)
			wound = 0;
		else
			wound = (100-hp);
		int limp = FixedMul(hp*0.009 + 0.1,boost);
		int mod = FixedDiv(41.0,GetActorViewHeight(ActivatorTID()));
		if (boost > 0.5825 || altStep == 0 || hp >= 100)
			SetActorProperty(0,APROP_Speed,FixedDiv(boost,mod));
		else
			SetActorProperty(0,APROP_Speed,FixedDiv(limp,mod));
		if (hp > 0)
		{
			if (!falling && GetActorZ(0) - GetActorFloorZ(0) >= 8.0)
				falling = true;
			if (controlWithCVars)
			{
				volumeMultiplier = mod;//GetCVar(volumeMultiplierCVar);
				delayMultiplier = 1.0;//GetCVar(delayMultiplierCVar);
			}
			vel = GetVelocity();
			if (vel > 8.8)
			{
				TakeInventory("R6_Stamina",2+wound/15);
				if (CheckInventory("R6_Stamina") == 0)
					TakeInventory("sprinting",1);
			}
			else
				GiveInventory("R6_Stamina",1);
			if (hp >= 100)
				delayTime = map(vel,8.8,19.0,11.7,6.0)>>16;
			else
			{
				delayTime = map(vel,8.8,19.0,11.7 + wound*0.12,6.0)>>16;
				if (altStep)
					delayTime = max(delayTime*hp/100,6);
			}
			if (falling)
			{
				counter = min(counter,6);
				stepVolume = min(stepVolume+0.045,1.0);
				rollDest = 0.0;
			}
			else
				stepVolume = FixedMul(map(vel,0,8.8,0.0,1.0),volumeMultiplier);
			if (GetActorFloorZ(0) - lastZ >= 8.0)
				counter = min(counter,6);
			if (counter-- <= 0)
			{
				counter = delayTime;
				if (vel > 0.16 && GetActorZ(0) - GetActorFloorZ(0) < 8.0)
				{
					for (i = 0; i < FLOOR_TEXTURES; i++)
					{
						if (CheckActorFloorTexture(0, floorTexture[i]))
						{
							langDef = StrParam(s:"STEP_", s:floorTexture[i]);
							stepSound = StrParam(l:langDef);
							if (!StrICmp(langDef, stepSound))
							{
								stepSound = defStepSound;
							}
						}
					}
					falling = false;
					int utid = UniqueTID();
					if (altStep)
						stepVolume += wound * 0.005;
					PlaySound(0,stepSound,0,stepVolume,false,FixedDiv(0.65,stepVolume));
					altStep = !altStep;
					rollDead = random(-0.375,0.375);
					
					//also increase roll while damaged
					mod += wound * 0.03;
					
					rollDest = (rollDir * expMap(stepVolume,0.0,1.0,0.0,0.015));
					rollDest = FixedMul(rollDest,mod);
					
					rollDir *= -1;
					
					lastZ = GetActorFloorZ(0);
					stepSound = defStepSound;
				}
			}
		}
		rollDest = rollDest*14/15;
		if (hp <= 0)
			roll = (roll*14+rollDead)/15;
		else if (GetCVar("cl_MoveTilt"))
		{
			if (hp >= 100)
				roll = (roll*9+rollDest)/10;
			else
				roll = (roll*(19-(hp/10))+rollDest)/(20-(hp/10));
		}
		else
			roll = 0;
		ChangeActorRoll(0,roll,true);
		lastHp = hp;
		Delay(1);
	}
}

// Functions
Function int StrToVal (str string)
{
	SetCVarString("strtoval", string);
	return GetCVar("strtoval");
}

Function int StrToFloat (str string)
{
	SetCVarString("strtofloat", string);
	return GetCVar("strtofloat");
}